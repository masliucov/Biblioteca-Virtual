/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pt.ua.estga.bibliotecavirtual;

import java.awt.Image;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author arti
 */
public class VerLivro extends javax.swing.JFrame {

    /**
     * Creates new form VerLivro
     */
    private String isbnAtual;

    public VerLivro(String isbn) {
        initComponents();
        this.isbnAtual = isbn;
        carregarDadosLivro(isbn);
        carregarSaldoAtual();
    }

      private void carregarSaldoAtual() {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();
            if (conn != null) {
                String sql = "SELECT saldo FROM utilizador WHERE id = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setInt(1, SessaoUtilizador.getIdUtilizador());
                rs = stmt.executeQuery();

                if (rs.next()) {
                    double saldo = rs.getDouble("saldo");
                    saldoAtual.setText(String.format("%.2f €", saldo)); // Exibe o saldo formatado
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar o saldo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
      
    public void carregarDadosLivro(String isbn) {
        String query = "SELECT l.nome, l.autor, c.nome as categoria, l.descricao, l.imagem, l.preco "
                + "FROM livro l "
                + "JOIN categoria c ON l.id_categoria = c.id_categoria "
                + "WHERE l.isbn = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, isbn);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                jTitulo.setText(rs.getString("nome"));
                jAutor.setText(rs.getString("autor"));
                jCategoria.setText(rs.getString("categoria"));
                jDescricao.setText(rs.getString("descricao"));
                jPreco.setText(String.format("€%.2f", rs.getDouble("preco")));

                String imageUrl = rs.getString("imagem");
                if (imageUrl != null && !imageUrl.isEmpty()) {
                    loadImageAsync(imageUrl);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Livro não encontrado com ISBN: " + isbn);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados do livro: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void loadImageAsync(String imageUrl) {
        new Thread(() -> {
            try {
                ImageIcon originalIcon = new ImageIcon(new URL(imageUrl));
                Image image = originalIcon.getImage();
                Image resizedImage = image.getScaledInstance(200, 300, Image.SCALE_SMOOTH);
                ImageIcon resizedIcon = new ImageIcon(resizedImage);
                SwingUtilities.invokeLater(() -> jLabel2.setIcon(resizedIcon));
            } catch (MalformedURLException e) {
                JOptionPane.showMessageDialog(this, "URL da imagem inválida: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTitulo = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jAutor = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCategoria = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jDescricao = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPreco = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        voltar = new javax.swing.JButton();
        comprar = new javax.swing.JButton();
        alugar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        verCarrinho = new javax.swing.JButton();
        adicionarCarrinho = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        saldoAtual = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 900));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Ver Livro");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel7.setText("Titulo");

        jTitulo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setText("Autor");

        jAutor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Categoria");

        jCategoria.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setText("Descrição");

        jDescricao.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setText("Preço");

        jPreco.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        comprar.setText("Comprar");
        comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarActionPerformed(evt);
            }
        });

        alugar.setText("Alugar");
        alugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alugarActionPerformed(evt);
            }
        });

        sair.setText("Sair");

        verCarrinho.setText("Ver carrinho");
        verCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCarrinhoActionPerformed(evt);
            }
        });

        adicionarCarrinho.setText("Adicionar ao carrinho");
        adicionarCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarCarrinhoActionPerformed(evt);
            }
        });

        jLabel8.setText("Saldo atual:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(voltar)
                        .addGap(170, 170, 170)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sair))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel2))
                            .addComponent(jPreco)
                            .addComponent(jLabel6)
                            .addComponent(jDescricao)
                            .addComponent(jLabel5)
                            .addComponent(jCategoria)
                            .addComponent(jLabel4)
                            .addComponent(jAutor)
                            .addComponent(jLabel3)
                            .addComponent(jTitulo)
                            .addComponent(jLabel7))
                        .addGap(0, 632, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(verCarrinho)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(adicionarCarrinho)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saldoAtual))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comprar)
                                .addGap(48, 48, 48)
                                .addComponent(alugar)))
                        .addGap(79, 79, 79))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sair)
                            .addComponent(voltar))))
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(verCarrinho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(10, 10, 10)
                .addComponent(jTitulo)
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAutor)
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jCategoria)
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jDescricao)
                .addGap(45, 45, 45)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jPreco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comprar)
                    .addComponent(alugar)
                    .addComponent(adicionarCarrinho))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(saldoAtual))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed

        ListaLivrosUtilizador registerWindow = new ListaLivrosUtilizador();

        registerWindow.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_voltarActionPerformed


    private void verCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCarrinhoActionPerformed

        Carrinho carrinho = Carrinho.getInstance();

        carrinho.setVisible(true);

    }//GEN-LAST:event_verCarrinhoActionPerformed

    private void adicionarCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarCarrinhoActionPerformed
        String titulo = jTitulo.getText();
        String preco = jPreco.getText().replace("€", "").trim().replace(",", ".");
        if (isbnAtual != null && !isbnAtual.isEmpty() && !preco.isEmpty()) {
            Carrinho.getInstance().adicionarAoCarrinho(isbnAtual, titulo, preco);
            Carrinho.getInstance().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Erro: Informação do livro incompleta.", "Erro ao Adicionar", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_adicionarCarrinhoActionPerformed

    private void comprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarActionPerformed
        Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        conn = DatabaseUtil.getConnection();
        conn.setAutoCommit(false); // inicia uma transação

        // obtem o saldo atual do utilizador
        String saldoSql = "SELECT saldo FROM utilizador WHERE id = ?";
        pstmt = conn.prepareStatement(saldoSql);
        pstmt.setInt(1, SessaoUtilizador.getIdUtilizador());
        rs = pstmt.executeQuery();

        double saldoAtual = 0;
        if (rs.next()) {
            saldoAtual = rs.getDouble("saldo");
        }

        // obtem o preço do livro
        double precoLivro = Double.parseDouble(jPreco.getText().replace("€", "").replace(",", ".").trim());

        // verifica se o saldo é suficiente
        if (saldoAtual >= precoLivro) {
            // obtem o id_livro e verificar o stock
            String getIdSql = "SELECT id_livro, copias FROM livro WHERE isbn = ?";
            pstmt = conn.prepareStatement(getIdSql);
            pstmt.setString(1, isbnAtual);
            rs = pstmt.executeQuery();

            if (rs.next() && rs.getInt("copias") > 0) {
                int livroId = rs.getInt("id_livro");

                // atualiza o número de cópias do livro
                String updateStockSql = "UPDATE livro SET copias = copias - 1 WHERE id_livro = ? AND copias > 0";
                pstmt = conn.prepareStatement(updateStockSql);
                pstmt.setInt(1, livroId);
                int updatedRows = pstmt.executeUpdate();

                if (updatedRows > 0) {
                    // atualiza o saldo do utilizador
                    String updateSaldoSql = "UPDATE utilizador SET saldo = saldo - ? WHERE id = ?";
                    pstmt = conn.prepareStatement(updateSaldoSql);
                    pstmt.setDouble(1, precoLivro);
                    pstmt.setInt(2, SessaoUtilizador.getIdUtilizador());
                    pstmt.executeUpdate();

                    // registra a compra na tabela de compras
                    String insertCompraSql = "INSERT INTO compra (id_utilizador, id_livro, data, preco) VALUES (?, ?, NOW(), ?)";
                    pstmt = conn.prepareStatement(insertCompraSql);
                    pstmt.setInt(1, SessaoUtilizador.getIdUtilizador());
                    pstmt.setInt(2, livroId);
                    pstmt.setDouble(3, precoLivro);
                    pstmt.executeUpdate();

                    // confirma a transação
                    conn.commit();
                    JOptionPane.showMessageDialog(this, "Compra realizada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Não há cópias suficientes disponíveis para compra.", "Erro de Estoque", JOptionPane.ERROR_MESSAGE);
                    conn.rollback();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Livro não encontrado na base de dados ou sem stock disponível.", "Erro de Stock", JOptionPane.ERROR_MESSAGE);
                conn.rollback();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Saldo insuficiente para realizar a compra.", "Saldo Insuficiente", JOptionPane.WARNING_MESSAGE);
            conn.rollback();
        }
    } catch (SQLException e) {
        try {
            if (conn != null) conn.rollback(); // desfaz a transação em caso de erro
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Erro ao processar a compra: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_comprarActionPerformed

    private void alugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alugarActionPerformed
      
    }//GEN-LAST:event_alugarActionPerformed
    private int generateCartId() {
        return (int) (Math.random() * 10000);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //  new VerLivro().setVisible(true);
            }
        });
    }

    public static void setLookAndFeel() throws UnsupportedLookAndFeelException {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarCarrinho;
    private javax.swing.JButton alugar;
    private javax.swing.JButton comprar;
    private javax.swing.JLabel jAutor;
    private javax.swing.JLabel jCategoria;
    private javax.swing.JLabel jDescricao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jPreco;
    private javax.swing.JLabel jTitulo;
    private javax.swing.JButton sair;
    private javax.swing.JLabel saldoAtual;
    private javax.swing.JButton verCarrinho;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables
}
