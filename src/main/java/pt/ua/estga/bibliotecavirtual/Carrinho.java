/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pt.ua.estga.bibliotecavirtual;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arti
 */
public class Carrinho extends javax.swing.JFrame {

    /**
     * Creates new form Carrinho
     */
    private static Carrinho instance;

    public static Carrinho getInstance() {
        if (instance == null) {
            instance = new Carrinho();
        }
        return instance;
    }

    private Carrinho() {
    initComponents();
    setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    verificarCarrinhoVazio();
    carregarSaldoAtual();
    }

      private void carregarSaldoAtual() {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();
            if (conn != null) {
                String sql = "SELECT saldo FROM utilizador WHERE id = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setInt(1, SessaoUtilizador.getIdUtilizador());
                rs = stmt.executeQuery();

                if (rs.next()) {
                    double saldo = rs.getDouble("saldo");
                    saldoAtual.setText(String.format("%.2f €", saldo)); // Exibe o saldo formatado
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar o saldo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

// metodo para adicionar o livro ao carrinho
    public void adicionarAoCarrinho(String isbn, String titulo, String preco) {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        preco = preco.replace("€", "").trim().replace(",", ".");
        model.addRow(new Object[]{isbn, titulo, preco});
        atualizarTotal();
        verificarCarrinhoVazio();
    }

    private void atualizarTotal() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        double total = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String precoStr = model.getValueAt(i, 2).toString().replace("€", "").trim().replace(",", ".");
            try {
                double preco = Double.parseDouble(precoStr);
                total += preco;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro ao converter o preço: " + precoStr, "Erro de Conversão", JOptionPane.ERROR_MESSAGE);
            }
        }
        jTotal.setText(String.format("€%.2f", total));
        verificarCarrinhoVazio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        limparCarrinho = new javax.swing.JButton();
        comprar = new javax.swing.JButton();
        jTotal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saldoAtual = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Carrinho");

        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Título", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaCarrinho);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Total");

        limparCarrinho.setText("Limpar carrinho");
        limparCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparCarrinhoActionPerformed(evt);
            }
        });

        comprar.setText("Comprar");
        comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarActionPerformed(evt);
            }
        });

        jLabel3.setText("Saldo atual:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(limparCarrinho)
                .addGap(35, 35, 35)
                .addComponent(comprar)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTotal)
                .addGap(94, 94, 94))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saldoAtual)
                .addGap(107, 107, 107))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(saldoAtual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limparCarrinho)
                    .addComponent(comprar)
                    .addComponent(jLabel2)
                    .addComponent(jTotal))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verificarCarrinhoVazio() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        boolean hasItems = model.getRowCount() > 0;
        comprar.setEnabled(hasItems);
    }


    private void limparCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparCarrinhoActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        model.setRowCount(0); // remove todas as rows da tabela
        atualizarTotal();
    }//GEN-LAST:event_limparCarrinhoActionPerformed

    private void comprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarActionPerformed
 DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        conn = DatabaseUtil.getConnection();
        conn.setAutoCommit(false); // Inicia uma transação

        // 1. Obter o saldo atual do utilizador
        String saldoSql = "SELECT saldo FROM utilizador WHERE id = ?";
        pstmt = conn.prepareStatement(saldoSql);
        pstmt.setInt(1, SessaoUtilizador.getIdUtilizador());
        rs = pstmt.executeQuery();

        double saldoAtual = 0;
        if (rs.next()) {
            saldoAtual = rs.getDouble("saldo");
        }

        // 2. Calcular o total do carrinho
        double totalCarrinho = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String precoStr = model.getValueAt(i, 2).toString().replace("€", "").trim().replace(",", ".");
            try {
                double preco = Double.parseDouble(precoStr);
                totalCarrinho += preco;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro ao converter o preço: " + precoStr, "Erro de Conversão", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // 3. Verificar se o saldo é suficiente
        if (saldoAtual >= totalCarrinho) {
            int cartId = generateCartId();

            // 4. Processar cada item do carrinho
            for (int i = 0; i < model.getRowCount(); i++) {
                String isbn = model.getValueAt(i, 0).toString();
                double preco = Double.parseDouble(model.getValueAt(i, 2).toString().replace("€", "").replace(",", ".").trim());

                // 5. Obter o id_livro e verificar o stock
                String getIdSql = "SELECT id_livro, copias FROM livro WHERE isbn = ?";
                pstmt = conn.prepareStatement(getIdSql);
                pstmt.setString(1, isbn);
                rs = pstmt.executeQuery();

                if (rs.next()) {
                    int livroId = rs.getInt("id_livro");
                    int copias = rs.getInt("copias");

                    if (copias > 0) {
                        // 6. Atualizar o número de cópias do livro
                        String updateCopiesSql = "UPDATE livro SET copias = copias - 1 WHERE id_livro = ?";
                        pstmt = conn.prepareStatement(updateCopiesSql);
                        pstmt.setInt(1, livroId);
                        pstmt.executeUpdate();

                        // 7. Registrar a compra na tabela de compras
                        String insertCompraSql = "INSERT INTO compra (id_carrinho, id_utilizador, id_livro, data, preco) VALUES (?, ?, ?, NOW(), ?)";
                        pstmt = conn.prepareStatement(insertCompraSql);
                        pstmt.setInt(1, cartId);
                        pstmt.setInt(2, SessaoUtilizador.getIdUtilizador());
                        pstmt.setInt(3, livroId);
                        pstmt.setDouble(4, preco);
                        pstmt.executeUpdate();
                    } else {
                        JOptionPane.showMessageDialog(this, "Não há cópias suficientes disponíveis para o livro com ISBN: " + isbn, "Erro de Estoque", JOptionPane.ERROR_MESSAGE);
                        conn.rollback();
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Livro não encontrado na base de dados para ISBN: " + isbn, "Erro de Base de Dados", JOptionPane.ERROR_MESSAGE);
                    conn.rollback();
                    return;
                }
            }

            // 8. Atualizar o saldo do utilizador
            String updateSaldoSql = "UPDATE utilizador SET saldo = saldo - ? WHERE id = ?";
            pstmt = conn.prepareStatement(updateSaldoSql);
            pstmt.setDouble(1, totalCarrinho);
            pstmt.setInt(2, SessaoUtilizador.getIdUtilizador());
            pstmt.executeUpdate();

            // 9. Confirmar a transação
            conn.commit();
            JOptionPane.showMessageDialog(this, "Compra realizada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            clearCart(); // Limpa o carrinho após a compra
        } else {
            JOptionPane.showMessageDialog(this, "Saldo insuficiente para realizar a compra.", "Saldo Insuficiente", JOptionPane.WARNING_MESSAGE);
            conn.rollback();
        }
    } catch (SQLException e) {
        try {
            if (conn != null) conn.rollback(); // Desfaz a transação em caso de erro
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Erro ao processar a compra: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) {
                conn.setAutoCommit(true); // Restaura o auto-commit
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_comprarActionPerformed

    private void clearCart() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        model.setRowCount(0); // remove todas as rows da tabela
        atualizarTotal();
    }

    private int generateCartId() {
        //  gera um ID de carrinho
        return (int) (Math.random() * 10000);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Carrinho().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comprar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTotal;
    private javax.swing.JButton limparCarrinho;
    private javax.swing.JLabel saldoAtual;
    private javax.swing.JTable tabelaCarrinho;
    // End of variables declaration//GEN-END:variables

}
