/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pt.ua.estga.bibliotecavirtual;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arti
 */
public class Carrinho extends javax.swing.JFrame {

    /**
     * Creates new form Carrinho
     */
    private static Carrinho instance;

    public static Carrinho getInstance() {
        if (instance == null) {
            instance = new Carrinho();
        }
        return instance;
    }

    private Carrinho() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        verificarCarrinhoVazio();
    }

// metodo para adicionar o livro ao carrinho
    public void adicionarAoCarrinho(String isbn, String titulo, String preco) {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        preco = preco.replace("€", "").trim().replace(",", ".");
        model.addRow(new Object[]{isbn, titulo, preco});
        atualizarTotal();
        verificarCarrinhoVazio();
    }

    private void atualizarTotal() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        double total = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String precoStr = model.getValueAt(i, 2).toString().replace("€", "").trim().replace(",", ".");
            try {
                double preco = Double.parseDouble(precoStr);
                total += preco;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro ao converter o preço: " + precoStr, "Erro de Conversão", JOptionPane.ERROR_MESSAGE);
            }
        }
        jTotal.setText(String.format("€%.2f", total));
        verificarCarrinhoVazio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        voltar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        limparCarrinho = new javax.swing.JButton();
        comprar = new javax.swing.JButton();
        jTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Carrinho");

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });

        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Título", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaCarrinho);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Total");

        limparCarrinho.setText("Limpar carrinho");
        limparCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparCarrinhoActionPerformed(evt);
            }
        });

        comprar.setText("Comprar");
        comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(voltar)
                .addGap(135, 135, 135)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sair)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(limparCarrinho)
                .addGap(35, 35, 35)
                .addComponent(comprar)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTotal)
                .addGap(94, 94, 94))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sair)
                            .addComponent(voltar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limparCarrinho)
                    .addComponent(comprar)
                    .addComponent(jLabel2)
                    .addComponent(jTotal))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // Cria uma instância da interface DashboardUtilizador
        DashboardUtilizador registerWindow = new DashboardUtilizador();

        // Mete a janela DashboardUtilizador visível
        registerWindow.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_voltarActionPerformed

    private void verificarCarrinhoVazio() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        boolean hasItems = model.getRowCount() > 0;
        comprar.setEnabled(hasItems);
    }


    private void limparCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparCarrinhoActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        model.setRowCount(0); // remove todas as rows da tabela
        atualizarTotal();
    }//GEN-LAST:event_limparCarrinhoActionPerformed

    private void comprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        Connection conn = null;
        try {
            conn = DatabaseUtil.getConnection();
            conn.setAutoCommit(false);

            int cartId = generateCartId();

            for (int i = 0; i < model.getRowCount(); i++) {
                String isbn = model.getValueAt(i, 0).toString();
                double preco = Double.parseDouble(model.getValueAt(i, 2).toString().replace("€", "").replace(",", ".").trim());

                String getIdSql = "SELECT id_livro, copias FROM livro WHERE isbn = ?";
                PreparedStatement getIdStmt = conn.prepareStatement(getIdSql);
                getIdStmt.setString(1, isbn);
                ResultSet rs = getIdStmt.executeQuery();

                if (rs.next()) {
                    int livroId = rs.getInt("id_livro");
                    int copies = rs.getInt("copias");

                    if (copies > 0) {
                        // atualiza o número de cópias
                        String updateCopiesSql = "UPDATE livro SET copias = copias - 1 WHERE id_livro = ?";
                        PreparedStatement updateCopiesStmt = conn.prepareStatement(updateCopiesSql);
                        updateCopiesStmt.setInt(1, livroId);
                        updateCopiesStmt.executeUpdate();

                        // insere a transação
                        String insertTransactionSql = "INSERT INTO compra (id_carrinho, id_utilizador, id_livro, data, preco) VALUES (?, ?, ?, NOW(), ?)";
                        PreparedStatement insertTransactionStmt = conn.prepareStatement(insertTransactionSql);
                        insertTransactionStmt.setInt(1, cartId);
                        insertTransactionStmt.setInt(2, SessaoUtilizador.getIdUtilizador());
                        insertTransactionStmt.setInt(3, livroId);
                        insertTransactionStmt.setBigDecimal(4, BigDecimal.valueOf(preco));
                        insertTransactionStmt.executeUpdate();
                    } else {
                        JOptionPane.showMessageDialog(this, "Não existem cópias suficientes disponíveis para o ISBN: " + isbn, "Erro de Estoque", JOptionPane.ERROR_MESSAGE);
                        conn.rollback();
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Livro não encontrado na base de dados para ISBN: " + isbn, "Erro de Base de Dados", JOptionPane.ERROR_MESSAGE);
                    conn.rollback();
                    return;
                }
            }

            conn.commit();
            JOptionPane.showMessageDialog(this, "Compra realizada com sucesso!");
            clearCart();
        } catch (SQLException ex) {
            try {
                conn.rollback();
            } catch (SQLException ex1) {
                JOptionPane.showMessageDialog(this, "Erro ao desfazer as mudanças: " + ex1.getMessage(), "Erro de Transação", JOptionPane.ERROR_MESSAGE);
            }
            JOptionPane.showMessageDialog(this, "Erro durante a compra: " + ex.getMessage(), "Erro de Compra", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao configurar auto-commit: " + ex.getMessage(), "Erro de Configuração", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_comprarActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        // Cria uma instância da interface LoginInterface
        LoginInterface registerWindow = new LoginInterface();

        // Mete a janela LoginInterface visível
        registerWindow.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_sairActionPerformed

    private void clearCart() {
        DefaultTableModel model = (DefaultTableModel) tabelaCarrinho.getModel();
        model.setRowCount(0); // remove todas as rows da tabela
        atualizarTotal();
    }

    private int generateCartId() {
        //  gera um ID de carrinho
        return (int) (Math.random() * 10000);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Carrinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Carrinho().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comprar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTotal;
    private javax.swing.JButton limparCarrinho;
    private javax.swing.JButton sair;
    private javax.swing.JTable tabelaCarrinho;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables

}
